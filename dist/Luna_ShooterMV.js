/** ============================================================================
 *
 *  Luna_ShooterMV.js
 * 
 *  Build Date: 12/21/2020
 * 
 *  Made with LunaTea -- Haxe
 *
 * =============================================================================
*/
// Generated by Haxe 4.1.3
/*:
@author LunaTechs - Kino
@plugindesc A plugin that adds a social system to RPGMakerMV/MZ <LunaShooter>.

@target MV MZ

@param pauseText
@text Pause Text
@desc The text used for the pause scene
@default Pause

@param debugCollider
@text Debug Collider
@desc Shows the colliders in the game when turned on.
@default true

@param godMode
@text God Mode
@desc Whether the player will die or not in game
@default false

@param playerSpeed
@text Player Speed
@desc Player movement speed
@default 350

@param playerBulletImage
@text Player Bullet Image (Picture Folder)
@desc The player bullet which is loaded from the pictures folder.
@default player_bullet

@param playerBulletSpeed
@text Player Bullet Speed
@desc The speed at which player bullets will fly
@default 400

@param enemySpeed
@text Enemy Speed
@desc The speed for enemy boss
@default 250

@param enemyBulletImage
@text Enemy Bullet Image (Picture Folder)
@desc The bullet image used for enemies on screen
@default enemy_bullet

@param enemyBulletSpeed
@text Enemy Bullet Speed
@desc The speed at which enemy bullets will fly
@default 150

@param hpColor
@text  Hp Color
@desc The color of the HP gauges(css color)
@default #B33951 

@param boostFactor
@text Boost Factor(seconds)
@desc How much of the player speed is used when boosting
@default 0.5

@param boostCD
@text Boost Cooldown(seconds)
@desc The cooldown of the player boost
@default 2.5

@param damageFlashTime
@text Damage Flash Time
@desc The time enemies and players flash when taking damage(seconds)
@default 2.0

@param backgroundPicture
@text Background Picture
@desc The name of the background image in the social system scene.
@default Translucent



@help
==== How To Use ====

 Note: contactId is the same as the eventId on that map.
 
 LunaSocialSys.setContactDescription(contactName, description)
  - Update/change the contact description you entered.
  
 LunaSocialSys.getContactDescription(contactName)
  - Returns the contact description (can store in a game variable).
  
 LunaSocialSys.setContactSocialRate(contactName, rate) 
 - Adjusts the socialMeter 0 - 100
 
 LunaSocialSys.updateContactSocialRate(contactName, value)
 - Add/Subtract the social rate by some value (converted to decimal).
 - You can enter negative or positive numbers.
    
 LunaSocialSys.getContactSocialRate(contactName)
 - Returns the contact social rate (can store this in a game variable).
  Note: It will be between 0 - 100; it won't be in decimal format.

 LunaSocialSys.startSocialSystemScene()
  - Starts the social System scene.
MIT License
Copyright (c) 2020 LunaTechsDev
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE
*/

(function ($hx_exports, $global) {
  "use strict";
  var $estr = function () {
      return js_Boot.__string_rec(this, "");
    },
    $hxEnums = $hxEnums || {};
  class DMManager extends DataManager {}

  DMManager.__name__ = true;
  class EReg {
    constructor(r, opt) {
      this.r = new RegExp(r, opt.split("u").join(""));
    }
    match(s) {
      if (this.r.global) {
        this.r.lastIndex = 0;
      }
      this.r.m = this.r.exec(s);
      this.r.s = s;
      return this.r.m != null;
    }
  }

  EReg.__name__ = true;
  class HxOverrides {
    static remove(a, obj) {
      let i = a.indexOf(obj);
      if (i == -1) {
        return false;
      }
      a.splice(i, 1);
      return true;
    }
    static now() {
      return Date.now();
    }
  }

  HxOverrides.__name__ = true;
  class Lambda {
    static iter(it, f) {
      let x = $getIterator(it);
      while (x.hasNext()) {
        let x1 = x.next();
        f(x1);
      }
    }
    static findIndex(it, f) {
      let i = 0;
      let v = $getIterator(it);
      while (v.hasNext()) {
        let v1 = v.next();
        if (f(v1)) {
          return i;
        }
        ++i;
      }
      return -1;
    }
  }

  Lambda.__name__ = true;
  class CollisionSystem {
    static initialize() {
      CollisionSystem.colliderIds.length = 100;
      Lambda.iter(CollisionSystem.colliderIds, function (el) {});
    }
    static generateId() {
      let id = Lambda.findIndex(CollisionSystem.colliderIds, function (el) {
        return el == null;
      });
      if (id == -1) {
        CollisionSystem.colliderIds.push(
          CollisionSystem.colliderIds.length + 1
        );
        id = CollisionSystem.colliderIds.length + 1;
      } else {
        CollisionSystem.colliderIds[id] = id;
      }
      return id;
    }
    static addCollider(collider) {
      CollisionSystem.colliders.push(collider);
      collider.id = CollisionSystem.generateId();
    }
    static removeCollider(collider) {
      CollisionSystem.colliderIds[collider.id] = null;
      collider.id = null;
      HxOverrides.remove(CollisionSystem.colliders, collider);
    }
    static update() {
      Lambda.iter(CollisionSystem.colliders, function (collider) {
        CollisionSystem.updateColliderPos(collider);
        CollisionSystem.handleCollisions(collider);
        CollisionSystem.handleNonCollisions(collider);
      });
    }
    static updateColliderPos(collider) {
      let parent = collider.parent;
      if (parent != null && parent.hasOwnProperty("pos")) {
        collider.x = parent.pos.x;
        collider.y = parent.pos.y;
      }
    }
    static handleCollisions(collider) {
      let _this = CollisionSystem.colliders;
      let _g = [];
      let _g1 = 0;
      while (_g1 < _this.length) {
        let v = _this[_g1];
        ++_g1;
        if (collider.isCollided(v) && collider.id != v.id) {
          _g.push(v);
        }
      }
      let _g2 = 0;
      while (_g2 < _g.length) {
        let collision = _g[_g2];
        ++_g2;
        collider.addCollision(collision);
      }
    }
    static handleNonCollisions(collider) {
      let _this = CollisionSystem.colliders;
      let _g = [];
      let _g1 = 0;
      while (_g1 < _this.length) {
        let v = _this[_g1];
        ++_g1;
        if (!collider.isCollided(v) && collider.id != v.id) {
          _g.push(v);
        }
      }
      let _g2 = 0;
      while (_g2 < _g.length) {
        let collision = _g[_g2];
        ++_g2;
        collider.removeCollision(collision);
      }
    }
    static clear() {
      CollisionSystem.colliderIds = [];
      CollisionSystem.colliders = [];
    }
  }

  CollisionSystem.__name__ = true;
  class LunaShooter {
    static main() {
      let _g = [];
      let _g1 = 0;
      let _g2 = $plugins;
      while (_g1 < _g2.length) {
        let v = _g2[_g1];
        ++_g1;
        if (new EReg("<LunaShooter>", "ig").match(v.description)) {
          _g.push(v);
        }
      }
      let plugin = _g[0];
      let params = plugin.parameters;
      let tmp = parseInt(params["playerSpeed"], 10);
      let tmp1 = parseInt(params["playerBulletSpeed"], 10);
      let tmp2 = parseInt(params["enemySpeed"], 10);
      let tmp3 = parseInt(params["enemyBulletSpeed"], 10);
      let tmp4 = params["debugCollider"].toLowerCase() == "true";
      let tmp5 = params["godMode"].toLowerCase() == "true";
      let tmp6 = parseFloat(params["boostFactor"]);
      let tmp7 = parseFloat(params["boostCD"]);
      LunaShooter.Params = {
        backgroundPicture: params["backgroundPicture"],
        playerSpeed: tmp,
        playerBulletImage: params["playerBulletImage"],
        playerBulletSpeed: tmp1,
        enemySpeed: tmp2,
        enemyBulletImage: params["enemyBulletImage"],
        enemyBulletSpeed: tmp3,
        debugCollider: tmp4,
        godMode: tmp5,
        hpColor: params["hpColor"],
        boostFactor: tmp6,
        boostCD: tmp7,
        damageFlashTime: parseFloat(params["damageFlashTime"]),
        pauseText: params["pauseText"],
      };

      //=============================================================================
      // Scene_Map
      //=============================================================================
      let _Scene_Map_initialize = Scene_Map.prototype.initialize;
      Scene_Map.prototype.initialize = function () {
        _Scene_Map_initialize.call(this);
      };
      let _Scene_Map_onMapLoaded = Scene_Map.prototype.onMapLoaded;
      Scene_Map.prototype.onMapLoaded = function () {
        _Scene_Map_onMapLoaded.call(this);
      };
      let _Scene_Map_start = Scene_Map.prototype.start;
      Scene_Map.prototype.start = function () {
        _Scene_Map_start.call(this);
      };

      //=============================================================================
      // DataManager
      //=============================================================================
      let _DataManager_makeSaveContents = DataManager.makeSaveContents;
      DataManager.makeSaveContents = function () {
        let contents = {};
        contents = _DataManager_makeSaveContents.call(this);
        contents.allMapContacts = {};
        return contents;
      };
      let _DataManager_extractSaveContents = DataManager.extractSaveContents;
      DataManager.extractSaveContents = function (contents) {
        _DataManager_extractSaveContents.call(this);
      };
    }
    static params() {
      return LunaShooter.Params;
    }
    static startGameScene() {
      SceneManager.push(LunaSceneShooter);
    }
    static setTimeScale(scale) {
      LunaShooter.timeScale = scale;
    }
    static getTimeScale() {
      return LunaShooter.timeScale;
    }
  }

  $hx_exports["LunaShooter"] = LunaShooter;
  LunaShooter.__name__ = true;
  Math.__name__ = true;
  class SceneMap extends Scene_Map {
    constructor() {
      super();
    }
    initialize() {
      _Scene_Map_initialize.call(this);
    }
    onMapLoaded() {
      _Scene_Map_onMapLoaded.call(this);
    }
    start() {
      _Scene_Map_start.call(this);
    }
  }

  SceneMap.__name__ = true;
  class Anim extends PIXI.utils.EventEmitter {
    constructor(sprite, animFn) {
      super();
      this.sprite = sprite;
      this.animFn = animFn;
    }
    start() {
      this.isStarted = true;
      this.emit("start", this);
    }
    stop() {
      this.isStarted = false;
      this.emit("stop", this);
    }
    update(deltaTime) {
      this.animFn(this.sprite, deltaTime);
    }
  }

  Anim.__name__ = true;
  class core_Collider extends Rectangle {
    constructor(parent, layer, x, y, width, height) {
      super(x, y, width, height);
      this.parent = parent;
      this.layer = layer;
      this.isOn = true;
      this.collisions = [];
    }
    isCollided(collider) {
      let topLeft_x = this.x;
      let topLeft_y = this.y;
      let bottomLeft_x = this.x;
      let bottomLeft_y = this.y + this.height;
      let topRight_x = this.x + this.width;
      let topRight_y = this.x;
      let bottomRight_x = this.x + this.width;
      let bottomRight_y = this.y + this.height;
      if (
        !(
          collider.contains(topLeft_x, topLeft_y) ||
          collider.contains(bottomLeft_x, bottomLeft_y) ||
          collider.contains(topRight_x, topRight_y)
        )
      ) {
        return collider.contains(bottomRight_x, bottomRight_y);
      } else {
        return true;
      }
    }
    addCollision(collision) {
      if (!this.collisions.includes(collision)) {
        this.collisions.push(collision);
      }
    }
    removeCollision(collision) {
      if (this.collisions.includes(collision) && !collision.isCollided(this)) {
        HxOverrides.remove(this.collisions, collision);
      }
    }
  }

  core_Collider.__name__ = true;
  class Scriptable extends PIXI.utils.EventEmitter {
    constructor() {
      super();
    }
    initialize() {
      this.emit("init");
    }
    update(deltaTime) {
      this.emit("update");
    }
    destroy() {
      this.emit("destroy");
    }
  }

  Scriptable.__name__ = true;
  class LNState extends PIXI.utils.EventEmitter {
    constructor(state) {
      super();
      this.currentState = state;
      this.emit("enterState" + this.currentState);
    }
    transitionTo(state) {
      this.emit("exitState" + this.currentState);
      this.currentState = state;
      this.emit("enterState" + this.currentState);
    }
    update() {
      this.emit(this.currentState);
    }
    static create(state) {
      let stateMachine = new LNState(state);
      return stateMachine;
    }
  }

  $hx_exports["LNState"] = LNState;
  LNState.__name__ = true;
  class entity_Node2D extends Scriptable {
    constructor(posX, posY) {
      super();
      this.pos = { x: posX, y: posY };
    }
  }

  entity_Node2D.__name__ = true;
  class entity_Bullet extends entity_Node2D {
    constructor(layer, atk, posX, posY, bulletImage) {
      super(posX, posY);
      this.atk = atk;
      this.layer = layer;
      this.bulletImage = bulletImage;
      this.initialize();
    }
    initialize() {
      super.initialize();
      this.speed = 200;
      this.dir = { x: 0, y: 0 };
      let _gthis = this;
      this.bulletImage.addLoadListener(function (bitmap) {
        _gthis.sprite = new spr_LNSprite(_gthis, bitmap);
        _gthis.sprite.x = _gthis.pos.x;
        _gthis.sprite.y = _gthis.pos.y;
        _gthis.collider = new core_Collider(
          _gthis,
          _gthis.layer,
          _gthis.pos.x,
          _gthis.pos.y,
          bitmap.width,
          bitmap.height
        );
        SpriteSystem.add(_gthis.sprite);
        CollisionSystem.addCollider(_gthis.collider);
      });
    }
    fire(direction) {
      this.dir.x = direction.x;
      this.dir.y = direction.y;
    }
    update(deltaTime) {
      super.update(deltaTime);
      this.processMovement(deltaTime);
      this.processDeletion();
    }
    processMovement(deltaTime) {
      let xMove = this.dir.x * this.speed * deltaTime;
      let yMove = this.dir.y * this.speed * deltaTime;
      let pos = this.pos;
      pos.x += xMove;
      pos.y += yMove;
    }
    processDeletion() {
      if (
        this.pos.x < 0 ||
        this.collider.width + this.pos.x > Graphics.boxWidth
      ) {
        this.destroy();
      }
      if (
        this.pos.y < 0 ||
        this.collider.height + this.pos.y > Graphics.boxHeight
      ) {
        this.destroy();
      }
    }
    destroy() {
      super.destroy();
      CollisionSystem.removeCollider(this.collider);
      SpriteSystem.remove(this.sprite);
      this.sprite.visible = false;
    }
  }

  entity_Bullet.__name__ = true;
  class entity_BulletSpawner extends entity_Node2D {
    constructor(layer, bulletImg, posX, posY) {
      super(posX, posY);
      this.timeScale = 1.0;
      this.bulletSpeed = 200;
      this.layer = layer;
      this.bulletImg = bulletImg;
    }
    start() {
      this.isStarted = true;
    }
    stop() {
      this.isStarted = false;
    }
    update(deltaTime) {
      let ts = LunaShooter.timeScale * this.timeScale;
      if (this.isStarted) {
        this.spawnBullet(deltaTime * ts);
      }
      this.processBullets(deltaTime * ts);
    }
    spawnBullet(deltaTime) {}
    processBullets(deltaTime) {
      let _gthis = this;
      let _this = this.bulletList;
      let _g = [];
      let _g1 = 0;
      while (_g1 < _this.length) {
        let v = _this[_g1];
        ++_g1;
        if (v.sprite.visible) {
          _g.push(v);
        }
      }
      this.bulletList = _g;
      Lambda.iter(this.bulletList, function (bullet) {
        bullet.update(deltaTime);
        if (!bullet.sprite.visible) {
          _gthis.scene.removeChild(bullet.sprite);
          bullet = null;
        }
      });
    }
  }

  entity_BulletSpawner.__name__ = true;
  class entity_Character extends entity_Node2D {
    constructor(posX, posY, characterData) {
      super(posX, posY);
      this.char = characterData;
    }
    initialize() {
      this.damageAnimTime = 0;
      let _gthis = this;
      this.charImg.addLoadListener(function (bitmap) {
        _gthis.sprite = new spr_LNSprite(_gthis, bitmap);
        _gthis.collider = new core_Collider(
          _gthis,
          _gthis.layer,
          _gthis.pos.x,
          _gthis.pos.y,
          bitmap.width,
          bitmap.height
        );
        SpriteSystem.add(_gthis.sprite);
        CollisionSystem.addCollider(_gthis.collider);
        _gthis.hpGauge = new spr_SpriteGauge(0, 0, bitmap.width, 12);
        _gthis.sprite.addChild(_gthis.hpGauge);
      });
    }
    takeDamage(damage) {
      this.char.hp -= damage;
      this.damageAnimTime = LunaShooter.Params.damageFlashTime;
      this.damageAnim.start();
    }
    update(deltaTime) {
      super.update(deltaTime);
      if (this.damageAnim != null && this.damageAnim.isStarted) {
        this.processDamage(deltaTime);
      }
      this.processHp();
    }
    processDamage(deltaTime) {
      if (this.damageAnimTime > 0) {
        this.damageAnim.update(deltaTime);
        this.damageAnimTime -= deltaTime;
      } else {
        this.damageAnim.stop();
      }
    }
    processHp() {
      let char = this.char;
      this.hpGauge.updateGauge(char.hp / char.maxHp);
    }
  }

  entity_Character.__name__ = true;
  class entity_Enemy extends entity_Character {
    constructor(posX, posY, characterData, enemyImg) {
      super(posX, posY, characterData);
      this.layer = "enemy";
      this.charImg = enemyImg;
    }
  }

  entity_Enemy.__name__ = true;
  class entity_Player extends entity_Character {
    constructor(posX, posY, characterData, playerImage) {
      super(posX, posY, characterData);
      this.layer = "player";
      this.charImg = playerImage;
      this.playerCoordTrail = [];
      this.initialize();
    }
    initialize() {
      super.initialize();
      this.bulletList = [];
      this.boostCD = LunaShooter.Params.boostCD;
      this.boostFactor = LunaShooter.Params.boostFactor;
      this.speed = LunaShooter.Params.playerSpeed;
      this.dir = { x: 0, y: 0 };
      let _gthis = this;
      this.damageAnim = new Anim(this.sprite, function (sprite, dt) {
        if (Graphics.frameCount % 30 == 0) {
          _gthis.sprite.visible = true;
        } else if (Graphics.frameCount % 15 == 0) {
          _gthis.sprite.visible = false;
        }
      });
      this.damageAnim.on("stop", function (anim) {
        _gthis.sprite.visible = true;
        _gthis.isDamaged = false;
      });
    }
    update(deltaTime) {
      super.update(deltaTime);
      this.processBullets(deltaTime);
      this.processFiring();
      this.processMovement(deltaTime);
      this.processBoosting(deltaTime);
      this.processCoordTrail();
      this.processBoundingBox();
      if (!this.isDamaged) {
        this.processCollision();
      }
    }
    processBullets(deltaTime) {
      let _this = this.bulletList;
      let _g = [];
      let _g1 = 0;
      while (_g1 < _this.length) {
        let v = _this[_g1];
        ++_g1;
        if (v.sprite.visible) {
          _g.push(v);
        }
      }
      this.bulletList = _g;
      Lambda.iter(this.bulletList, function (bullet) {
        bullet.update(deltaTime);
        if (!bullet.sprite.visible) {
          let scene = SceneManager._scene;
          scene.removeChild(bullet.sprite);
          bullet = null;
        }
      });
    }
    processCoordTrail() {
      let currentPos = { x: this.pos.x, y: this.pos.y };
      this.playerCoordTrail.push(currentPos);
      if (this.playerCoordTrail.length > 70) {
        this.playerCoordTrail.shift();
      }
    }
    processFiring() {
      if (Input.isTriggered("ok")) {
        let bulletSize = 24;
        let bulletImg = new Bitmap(bulletSize, bulletSize);
        let playerBullet = ImageManager.loadPicture(
          LunaShooter.Params.playerBulletImage
        );
        playerBullet.addLoadListener(function (bitmap) {
          bulletImg.blt(
            bitmap,
            0,
            0,
            bitmap.width,
            bitmap.height,
            0,
            0,
            bulletSize,
            bulletSize
          );
        });
        let bullet = new entity_Bullet(
          "playerBullet",
          this.char.atk,
          this.pos.x,
          this.pos.y - 12,
          bulletImg
        );
        bullet.speed = LunaShooter.Params.playerBulletSpeed;
        let scene = SceneManager._scene;
        scene.addChild(bullet.sprite);
        this.bulletList.push(bullet);
        bullet.fire({ x: 0, y: -1 });
      }
    }
    processMovement(deltaTime) {
      this.dir.x = 0;
      this.dir.y = 0;
      if (Input.isPressed("right")) {
        this.dir.x = 1;
      }
      if (Input.isPressed("left")) {
        this.dir.x = -1;
      }
      if (Input.isPressed("down")) {
        this.dir.y = 1;
      }
      if (Input.isPressed("up")) {
        this.dir.y = -1;
      }
      if (Input.isPressed("shift")) {
        this.boosting = true;
      }
      let xMove = this.dir.x * this.speed * deltaTime;
      let yMove = this.dir.y * this.speed * deltaTime;
      let pos = this.pos;
      pos.x += xMove;
      pos.y += yMove;
    }
    processBoosting(deltaTime) {
      let defaultSpeed = LunaShooter.Params.playerSpeed;
      if (this.boosting && this.boostCD > 0) {
        this.speed =
          defaultSpeed +
          defaultSpeed *
            (this.boostFactor * (this.boostCD / LunaShooter.Params.boostCD));
        this.boostCD -= deltaTime;
      } else {
        this.boostCD = LunaShooter.Params.boostCD;
        this.boosting = false;
        this.speed = defaultSpeed;
      }
    }
    processBoundingBox() {
      this.pos.x = Math.min(
        Math.max(this.pos.x, 0),
        Graphics.boxWidth - this.collider.width
      );
      this.pos.y = Math.min(
        Math.max(this.pos.y, 0),
        Graphics.boxHeight - this.collider.height
      );
    }
    processCollision() {
      let _g = 0;
      let _g1 = this.collider.collisions;
      while (_g < _g1.length) {
        let collision = _g1[_g];
        ++_g;
        switch (collision.layer) {
          case "enemy":
            let character = collision.parent;
            this.takeDamage(character.char.atk);
            break;
          case "enemyBullet":
            let bullet = collision.parent;
            this.takeDamage(bullet.atk);
            break;
          default:
        }
      }
    }
    takeDamage(damage) {
      super.takeDamage(damage);
      this.isDamaged = true;
      $gameScreen.startShake(2, 1, 20);
    }
    destroy() {
      super.destroy();
      this.sprite.visible = false;
    }
  }

  entity_Player.__name__ = true;
  class entity_XSpawner extends entity_BulletSpawner {
    constructor(layer, scene, bulletImg, posX, posY) {
      super(layer, bulletImg, posX, posY);
      this.scene = scene;
      this.spawnPoint = { x: this.pos.x + 10, y: this.pos.y + 10 };
      this.shootDirection = { x: 1, y: 1 };
      this.shootRotation = 0;
      this.fireCooldown = 0.5;
      this.bulletList = [];
    }
    spawnBullet(deltaTime) {
      if (this.fireCooldown <= 0) {
        this.spawnPoint = { x: this.pos.x + 10, y: this.pos.y + 10 };
        let bulletImg = new Bitmap(12, 12);
        let bitmap = this.bulletImg;
        bulletImg.blt(bitmap, 0, 0, bitmap.width, bitmap.height, 0, 0, 12, 12);
        let angleList = [45, 125, 225, 315];
        let _g = 0;
        while (_g < angleList.length) {
          let angle = angleList[_g];
          ++_g;
          let bullet = new entity_Bullet(
            this.layer,
            this.bulletAtk,
            this.spawnPoint.x,
            this.spawnPoint.y,
            bulletImg
          );
          bullet.speed = this.bulletSpeed;
          this.scene.addChild(bullet.sprite);
          this.bulletList.push(bullet);
          bullet.fire(this.createRotationVector(angle));
        }
        this.fireCooldown = 0.25;
      } else {
        this.fireCooldown -= deltaTime;
      }
    }
    createRotationVector(angle) {
      return {
        x: Math.cos((angle * Math.PI) / 180),
        y: Math.sin((angle * Math.PI) / 180),
      };
    }
  }

  entity_XSpawner.__name__ = true;
  class entity_SpinningXSpawner extends entity_XSpawner {
    constructor(layer, scene, bulletImg, posX, posY) {
      super(layer, scene, bulletImg, posX, posY);
    }
    spawnBullet(deltaTime) {
      if (this.fireCooldown <= 0) {
        this.spawnPoint = { x: this.pos.x + 10, y: this.pos.y + 10 };
        let bulletImg = new Bitmap(12, 12);
        let bitmap = this.bulletImg;
        bulletImg.blt(bitmap, 0, 0, bitmap.width, bitmap.height, 0, 0, 12, 12);
        let topRight = 45 + this.shootRotation;
        let topLeft = 125 + this.shootRotation;
        let bottomLeft = 225 + this.shootRotation;
        let bottomRight = 315 + this.shootRotation;
        let angleList = [topRight, topLeft, bottomLeft, bottomRight];
        let _g = 0;
        while (_g < angleList.length) {
          let angle = angleList[_g];
          ++_g;
          let bullet = new entity_Bullet(
            this.layer,
            this.bulletAtk,
            this.spawnPoint.x,
            this.spawnPoint.y,
            bulletImg
          );
          bullet.speed = this.bulletSpeed;
          this.scene.addChild(bullet.sprite);
          this.bulletList.push(bullet);
          bullet.fire(this.createRotationVector(angle));
        }
        this.shootRotation += 15;
        this.fireCooldown = 0.25;
      } else {
        this.fireCooldown -= deltaTime;
      }
    }
  }

  entity_SpinningXSpawner.__name__ = true;
  class entity_WhiteKnight extends entity_Enemy {
    constructor(scene, posX, posY, characterData, enemyImage) {
      super(posX, posY, characterData, enemyImage);
      this.scene = scene;
      this.initialize();
    }
    initialize() {
      super.initialize();
      this.moveTimer = 2.5;
      this.dir = { x: 0, y: 0 };
      this.speed = LunaShooter.Params.enemySpeed;
      this.createSpawners();
      this.state = LNState.create("idle");
      this.setupStates();
      this.state.transitionTo("idle");
      let _gthis = this;
      this.damageAnim = new Anim(this.sprite, function (sprite, dt) {
        if (Graphics.frameCount % 30 == 0) {
          _gthis.sprite.visible = true;
        } else if (Graphics.frameCount % 15 == 0) {
          _gthis.sprite.visible = false;
        }
      });
      this.damageAnim.on("stop", function (anim) {
        _gthis.sprite.visible = true;
      });
    }
    setupStates() {
      let _gthis = this;
      this.state.on("enterState" + "idle", function () {
        _gthis.sprite.bitmap.fillRect(0, 0, 50, 50, "blue");
        haxe_Timer.delay(function () {
          _gthis.state.transitionTo("pattern1");
        }, 3000);
      });
      this.state.on("enterState" + "pattern1", function () {
        _gthis.dir.x = -1;
        _gthis.sprite.bitmap.fillRect(0, 0, 50, 50, "green");
        _gthis.spawner.start();
      });
      this.state.on("pattern1", function () {
        _gthis.pattern1();
      });
      this.state.on("enterState" + "pattern2", function () {
        _gthis.sprite.bitmap.fillRect(0, 0, 50, 50, "pink");
        _gthis.spawnerTwo.start();
      });
      this.state.on("pattern2", function () {
        _gthis.pattern2();
      });
      this.state.on("enterState" + "pattern3", function () {
        _gthis.spawnerTwo.bulletSpeed = 400;
      });
      this.state.on("pattern3", function () {
        _gthis.pattern3();
      });
      this.state.on("enterState" + "death", function () {
        _gthis.sprite.bitmap.fillRect(0, 0, 50, 50, "gray");
        _gthis.spawner.stop();
        _gthis.spawnerTwo.stop();
      });
    }
    createSpawners() {
      let enemyBullet = ImageManager.loadPicture(
        LunaShooter.Params.enemyBulletImage
      );
      let spawnerX = this.pos.x;
      let spawnerY = this.pos.y;
      let _gthis = this;
      enemyBullet.addLoadListener(function (bitmap) {
        let spawner = new entity_XSpawner(
          "enemyBullet",
          _gthis.scene,
          bitmap,
          spawnerX,
          spawnerY
        );
        let secondSpawner = new entity_SpinningXSpawner(
          "enemyBullet",
          _gthis.scene,
          bitmap,
          spawnerX,
          spawnerY
        );
        _gthis.spawner = spawner;
        _gthis.spawner.bulletAtk = _gthis.char.atk;
        _gthis.spawner.bulletSpeed = LunaShooter.Params.enemyBulletSpeed;
        _gthis.spawnerTwo = secondSpawner;
        _gthis.spawnerTwo.bulletAtk = _gthis.char.atk;
        _gthis.spawnerTwo.bulletSpeed = LunaShooter.Params.enemyBulletSpeed;
      });
    }
    update(deltaTime) {
      super.update(deltaTime);
      this.processSpawners(deltaTime);
      this.processBossPattern();
      this.processBoundingBox();
      this.processCollision();
    }
    processSpawners(deltaTime) {
      this.deltaTime = deltaTime;
      this.spawner.update(deltaTime);
      this.spawnerTwo.update(deltaTime);
    }
    processBossPattern() {
      this.state.update();
    }
    pattern1() {
      if (this.moveTimer <= 0) {
        this.dir.x *= -1;
        this.moveTimer = 2.5;
      } else {
        this.moveTimer -= this.deltaTime;
      }
      let xMove = this.dir.x * this.speed * this.deltaTime;
      let yMove = this.dir.y * this.speed * this.deltaTime;
      let pos = this.pos;
      pos.x += xMove;
      pos.y += yMove;
      let pos1 = this.spawner.pos;
      pos1.x = this.pos.x;
      pos1.y = this.pos.y;
      let pos2 = this.spawnerTwo.pos;
      pos2.x = this.pos.x;
      pos2.y = this.pos.y;
      let char = this.char;
      if (char.hp / char.maxHp < 0.5) {
        this.state.transitionTo("pattern2");
      }
    }
    pattern2() {
      let char = this.char;
      if (char.hp / char.maxHp <= 0.2) {
        this.state.transitionTo("pattern3");
      }
    }
    pattern3() {
      let char = this.char;
      if (char.hp / char.maxHp <= 0) {
        this.state.transitionTo("death");
      }
    }
    processBoundingBox() {
      this.pos.x = Math.min(
        Math.max(this.pos.x, 0),
        Graphics.boxWidth - this.collider.width
      );
      this.pos.y = Math.min(
        Math.max(this.pos.y, 0),
        Graphics.boxHeight - this.collider.height
      );
    }
    processCollision() {
      let _g = 0;
      let _g1 = this.collider.collisions;
      while (_g < _g1.length) {
        let collision = _g1[_g];
        ++_g;
        switch (collision.layer) {
          case "player":
            this.takeDamage(0);
            break;
          case "playerBullet":
            let bullet = collision.parent;
            if (bullet != null) {
              this.takeDamage(bullet.atk);
            }
            break;
          default:
        }
      }
    }
    destroy() {
      super.destroy();
      this.sprite.visible = false;
    }
  }

  entity_WhiteKnight.__name__ = true;
  class ext_BitmapExt {
    static lineTo(bitmap, strokeStyle, x1, y1, x2, y2) {
      let context = bitmap.context;
      context.beginPath();
      context.moveTo(x1, y1);
      context.lineTo(x2, y2);
      context.strokeStyle = strokeStyle;
      context.stroke();
      bitmap._setDirty();
    }
  }

  ext_BitmapExt.__name__ = true;
  class haxe_Timer {
    constructor(time_ms) {
      let me = this;
      this.id = setInterval(function () {
        me.run();
      }, time_ms);
    }
    stop() {
      if (this.id == null) {
        return;
      }
      clearInterval(this.id);
      this.id = null;
    }
    run() {}
    static delay(f, time_ms) {
      let t = new haxe_Timer(time_ms);
      t.run = function () {
        t.stop();
        f();
      };
      return t;
    }
  }

  haxe_Timer.__name__ = true;
  class haxe_iterators_ArrayIterator {
    constructor(array) {
      this.current = 0;
      this.array = array;
    }
    hasNext() {
      return this.current < this.array.length;
    }
    next() {
      return this.array[this.current++];
    }
  }

  haxe_iterators_ArrayIterator.__name__ = true;
  class js_Boot {
    static __string_rec(o, s) {
      if (o == null) {
        return "null";
      }
      if (s.length >= 5) {
        return "<...>";
      }
      let t = typeof o;
      if (t == "function" && (o.__name__ || o.__ename__)) {
        t = "object";
      }
      switch (t) {
        case "function":
          return "<function>";
        case "object":
          if (o.__enum__) {
            let e = $hxEnums[o.__enum__];
            let n = e.__constructs__[o._hx_index];
            let con = e[n];
            if (con.__params__) {
              s = s + "\t";
              return (
                n +
                "(" +
                (function ($this) {
                  var $r;
                  let _g = [];
                  {
                    let _g1 = 0;
                    let _g2 = con.__params__;
                    while (true) {
                      if (!(_g1 < _g2.length)) {
                        break;
                      }
                      let p = _g2[_g1];
                      _g1 = _g1 + 1;
                      _g.push(js_Boot.__string_rec(o[p], s));
                    }
                  }
                  $r = _g;
                  return $r;
                })(this).join(",") +
                ")"
              );
            } else {
              return n;
            }
          }
          if (o instanceof Array) {
            let str = "[";
            s += "\t";
            let _g = 0;
            let _g1 = o.length;
            while (_g < _g1) {
              let i = _g++;
              str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i], s);
            }
            str += "]";
            return str;
          }
          let tostr;
          try {
            tostr = o.toString;
          } catch (_g) {
            return "???";
          }
          if (
            tostr != null &&
            tostr != Object.toString &&
            typeof tostr == "function"
          ) {
            let s2 = o.toString();
            if (s2 != "[object Object]") {
              return s2;
            }
          }
          let str = "{\n";
          s += "\t";
          let hasp = o.hasOwnProperty != null;
          let k = null;
          for (k in o) {
            if (hasp && !o.hasOwnProperty(k)) {
              continue;
            }
            if (
              k == "prototype" ||
              k == "__class__" ||
              k == "__super__" ||
              k == "__interfaces__" ||
              k == "__properties__"
            ) {
              continue;
            }
            if (str.length != 2) {
              str += ", \n";
            }
            str += s + k + " : " + js_Boot.__string_rec(o[k], s);
          }
          s = s.substring(1);
          str += "\n" + s + "}";
          return str;
        case "string":
          return o;
        default:
          return String(o);
      }
    }
  }

  js_Boot.__name__ = true;

  class LunaScenePause extends Scene_MenuBase {
    constructor() {
      super();
    }
    create() {
      this.createWindowLayer();
      this.createAllWindows();
    }
    createAllWindows() {
      this.createTitle();
      this.createPauseWindow();
      this.createConfirmWindow();
    }
    createTitle() {
      let centerX = Graphics.boxWidth / 2 - 87.5;
      this.pauseTitleWindow = new LNSWindowTitle(centerX, 70, 175, 75);
      this.addWindow(this.pauseTitleWindow);
      this.pauseTitleWindow.setTitle(LunaShooter.Params.pauseText);
    }
    createPauseWindow() {
      let width = 150;
      let xPosition = Graphics.boxWidth / 2 - width / 2;
      this.pauseMenuWindow = new WindowPauseMenu(
        xPosition,
        this.pauseTitleWindow.y + this.pauseTitleWindow.height + 30,
        width,
        250
      );
      this.pauseMenuWindow.setHandler(
        "resume",
        $bind(this, this.resumeHandler)
      );
      this.pauseMenuWindow.setHandler("retry", $bind(this, this.retryHandler));
      this.pauseMenuWindow.setHandler(
        "returnToTitle",
        $bind(this, this.returnToTitleHandler)
      );
      this.pauseMenuWindow.activate();
      this.addWindow(this.pauseMenuWindow);
    }
    createConfirmWindow() {
      let win = this.pauseMenuWindow;
      this.pauseConfirmWindow = new LNWindowConfirmMenu(win.x, win.y, 150, 75);
      this.pauseConfirmWindow.setHandler("yes", $bind(this, this.yesHandler));
      this.pauseConfirmWindow.setHandler("no", $bind(this, this.noHandler));
      this.pauseConfirmWindow.hide();
      this.pauseConfirmWindow.close();
      this.addWindow(this.pauseConfirmWindow);
    }
    update() {
      super.update();
    }
    resumeHandler() {
      this.popScene();
    }
    retryHandler() {
      SceneManager.goto(LunaSceneShooter);
    }
    returnToTitleHandler() {
      this.pauseConfirmWindow.show();
      this.pauseConfirmWindow.open();
      this.pauseConfirmWindow.activate();
    }
    yesHandler() {
      SceneManager.goto(Scene_Title);
    }
    noHandler() {
      this.pauseConfirmWindow.close();
      this.pauseConfirmWindow.deactivate();
      this.pauseMenuWindow.activate();
    }
  }

  $hx_exports["LunaScenePause"] = LunaScenePause;
  LunaScenePause.__name__ = true;
  class LunaSceneShooter extends Scene_Base {
    constructor() {
      super();
    }
    initialize() {
      super.initialize();
      this.timeStamp = LunaSceneShooter.performance.now();
      this.scriptables = [];
      CollisionSystem.initialize();
      this.createScriptables();
    }
    createScriptables() {
      this.createPlayer();
      this.createEnemies();
    }
    createPlayer() {
      let playerData = {
        atk: 1,
        def: 3,
        hp: 3,
        maxHp: 3,
        isPlayer: true,
        name: "Koizumi",
      };
      let centerX = Graphics.boxWidth / 2;
      let playerImage = new Bitmap(48, 48);
      playerImage.fillRect(0, 0, 48, 48, "white");
      let player = new entity_Player(centerX, 400, playerData, playerImage);
      this.player = player;
      this.addChild(player.sprite);
      this.scriptables.push(player);
    }
    createEnemies() {
      this.createBoss();
    }
    createBoss() {
      let bossData = {
        atk: 1,
        def: 2,
        hp: 200,
        maxHp: 200,
        isEnemy: true,
        name: "White Knight",
      };
      let bitmap = new Bitmap(50, 50);
      bitmap.fillRect(0, 0, 50, 50, "black");
      this.boss = new entity_WhiteKnight(this, 300, 100, bossData, bitmap);
      this.addChild(this.boss.sprite);
      this.scriptables.push(this.boss);
    }
    create() {
      super.create();
      this.createBackground();
      this.createParallax();
      this.createWindowLayer();
      this.createAllWindows();
      if (LunaShooter.Params.debugCollider) {
        this.createColliderDebugSprite();
      }
      this.createScreenSprite();
    }
    createBackground() {
      this.backgroundSprite = new Sprite();
      let bitmap = ImageManager.loadPicture(
        LunaShooter.Params.backgroundPicture
      );
      let _gthis = this;
      bitmap.addLoadListener(function (bitmap) {
        _gthis.backgroundSprite.bitmap = bitmap;
        _gthis.addChildAt(_gthis.backgroundSprite, 0);
      });
    }
    createParallax() {
      let forestParallax = ImageManager.loadPicture("Forest", 0);
      let _gthis = this;
      forestParallax.addLoadListener(function (bitmap) {
        _gthis.backgroundParallax1 = new TilingSprite(bitmap);
        _gthis.backgroundParallax1.move(0, 0, bitmap.width, bitmap.height);
        _gthis.addChildAt(_gthis.backgroundParallax1, 1);
      });
    }
    createAllWindows() {
      this.createBossWindow();
    }
    createBossWindow() {
      this.bossWindow = new win_WindowBoss(0, 0, Graphics.boxWidth, 75);
      this.addWindow(this.bossWindow);
      this.bossWindow.hide();
    }
    createColliderDebugSprite() {
      this.colliderDebugSprite = new Sprite();
      this.colliderDebugSprite.bitmap = new Bitmap(
        Graphics.boxWidth,
        Graphics.boxHeight
      );
      this.addChild(this.colliderDebugSprite);
    }
    createScreenSprite() {
      this.screenSprite = new Sprite();
      this.screenSprite.bitmap = new Bitmap(
        Graphics.boxWidth,
        Graphics.boxHeight
      );
      this.addChild(this.screenSprite);
    }
    update() {
      this.deltaTime =
        (LunaSceneShooter.performance.now() - this.timeStamp) / 1000;
      super.update();
      this.processScenePause();
      this.updateScriptables();
      this.updateParallax();
      this.updateBossWindow();
      CollisionSystem.update();
      SpriteSystem.update();
      this.timeStamp = LunaSceneShooter.performance.now();
      this.paint();
    }
    processScenePause() {
      if (Input.isTriggered("menu") || TouchInput.isCancelled()) {
        SceneManager.push(LunaScenePause);
      }
    }
    updateScriptables() {
      let _gthis = this;
      Lambda.iter(this.scriptables, function (scriptable) {
        scriptable.update(_gthis.deltaTime);
      });
    }
    updateParallax() {
      if (this.backgroundParallax1 != null) {
        this.backgroundParallax1.origin.x -= 0.64;
      }
    }
    updateBossWindow() {
      if (this.bossWindow.boss == null && this.boss != null) {
        this.bossWindow.setBoss(this.boss.char);
        this.bossWindow.show();
      }
      if (this.boss != null) {
        this.bossWindow.setBoss(this.boss.char);
      }
      this.bossWindow.update();
    }
    paint() {
      if (LunaShooter.Params.debugCollider) {
        this.paintColliders();
      }
      this.paintPlayerTrail();
    }
    paintPlayerTrail() {
      let bitmap = this.screenSprite.bitmap;
      bitmap.clear();
      let coords = this.player.playerCoordTrail;
      if (coords.length > 2) {
        let _g = 1;
        let _g1 = coords.length;
        while (_g < _g1) {
          let index = _g++;
          let start = coords[index - 1];
          let end = coords[index];
          ext_BitmapExt.lineTo(bitmap, "red", start.x, start.y, end.x, end.y);
        }
      }
    }
    paintColliders() {
      let colliders = CollisionSystem.colliders;
      let bitmap = this.colliderDebugSprite.bitmap;
      bitmap.clear();
      Lambda.iter(colliders, function (collider) {
        if (collider.isOn) {
          bitmap.fillRect(
            collider.x,
            collider.y,
            collider.width,
            collider.height,
            "red"
          );
        } else {
          bitmap.fillRect(
            collider.x,
            collider.y,
            collider.width,
            collider.height,
            "blue"
          );
        }
        bitmap.clearRect(
          collider.x + 2,
          collider.y + 2,
          collider.width - 4,
          collider.height - 4
        );
      });
    }
    terminate() {
      super.terminate();
      CollisionSystem.clear();
      SpriteSystem.clear();
    }
  }

  $hx_exports["LunaSceneShooter"] = LunaSceneShooter;
  LunaSceneShooter.__name__ = true;
  class spr_LNSprite extends Sprite {
    constructor(entity, bitmap) {
      super(bitmap);
      this.entity = entity;
    }
  }

  spr_LNSprite.__name__ = true;
  class spr_SpriteGauge extends Sprite {
    constructor(x, y, width, height) {
      super();
      let bitmap = new Bitmap(width, height);
      this.bitmap = bitmap;
      this.x = x;
      this.y = y;
      this.width = width;
      this.height = height;
    }
    update() {
      super.update();
    }
    updateGauge(hpRate) {
      this.paintGauge(hpRate);
    }
    paintGauge(rate) {
      let contents = this.bitmap;
      let fillW = Math.floor(this.width * rate);
      contents.fillRect(this.x, 0, this.width, this.height, "black");
      contents.gradientFillRect(
        this.x,
        0,
        fillW,
        this.height,
        LunaShooter.Params.hpColor,
        LunaShooter.Params.hpColor
      );
    }
  }

  spr_SpriteGauge.__name__ = true;
  class SpriteSystem {
    static initialize() {
      SpriteSystem.spriteIds.length = 100;
      Lambda.iter(SpriteSystem.spriteIds, function (el) {});
    }
    static generateId() {
      let id = Lambda.findIndex(SpriteSystem.spriteIds, function (el) {
        return el == null;
      });
      if (id == -1) {
        SpriteSystem.spriteIds.push(SpriteSystem.spriteIds.length + 1);
        id = SpriteSystem.spriteIds.length + 1;
      } else {
        SpriteSystem.spriteIds[id] = id;
      }
      return id;
    }
    static add(sprite) {
      SpriteSystem.sprites.push(sprite);
      sprite.id = SpriteSystem.generateId();
    }
    static remove(sprite) {
      SpriteSystem.spriteIds[sprite.id] = null;
      sprite.id = null;
      HxOverrides.remove(SpriteSystem.sprites, sprite);
    }
    static update() {
      Lambda.iter(SpriteSystem.sprites, function (sprite) {
        SpriteSystem.updateSpritePos(sprite);
      });
    }
    static updateSpritePos(sprite) {
      let parent = sprite.entity;
      if (parent != null && parent.hasOwnProperty("pos")) {
        sprite.x = parent.pos.x;
        sprite.y = parent.pos.y;
      }
    }
    static clear() {
      SpriteSystem.spriteIds = [];
      SpriteSystem.sprites = [];
    }
  }

  SpriteSystem.__name__ = true;
  class win_WindowBoss extends Window_Base {
    constructor(x, y, width, height) {
      super(x, y, width, height);
    }
    setBoss(boss) {
      this.boss = boss;
    }
    update() {
      super.update();
      this.refresh();
    }
    refresh() {
      if (this.contents != null && this.boss != null) {
        this.contents.clear();
        this.paint();
      }
    }
    paint() {
      this.paintName(0, 0);
      this.paintHp(0, 12);
    }
    paintName(x, y) {
      this.drawText(this.boss.name, x, y, this.contentsWidth(), "center");
    }
    paintHp(x, y) {
      let tmp = this.contentsWidth();
      let char = this.boss;
      this.drawGauge(
        x,
        y,
        tmp,
        char.hp / char.maxHp,
        LunaShooter.Params.hpColor,
        LunaShooter.Params.hpColor
      );
    }
  }

  win_WindowBoss.__name__ = true;
  class LNWindowConfirmMenu extends Window_HorzCommand {
    constructor(x, y, width, height) {
      super(x, y);
    }
    makeCommandList() {
      this.addCommand("Yes", "yes", true);
      this.addCommand("No", "no", true);
    }
    maxCols() {
      return 2;
    }
    maxItems() {
      return 2;
    }
  }

  LNWindowConfirmMenu.__name__ = true;
  class WindowPauseMenu extends Window_Command {
    constructor(x, y, width, height) {
      super(x, y);
    }
    makeCommandList() {
      super.makeCommandList();
      this.addCommand("Resume", "resume", true);
      this.addCommand("Return To Title", "returnToTitle", true);
    }
  }

  WindowPauseMenu.__name__ = true;
  class LNSWindowTitle extends Window_Base {
    constructor(x, y, width, height) {
      super(x, y, width, height);
    }
    setTitle(text) {
      this.text = text;
      this.paint();
    }
    paint() {
      if (this.contents != null) {
        this.contents.clear();
        this.paintTitle();
      }
    }
    paintTitle() {
      this.drawText(this.text, 0, 0, this.contentsWidth(), "center");
    }
  }

  LNSWindowTitle.__name__ = true;
  function $getIterator(o) {
    if (o instanceof Array) return new haxe_iterators_ArrayIterator(o);
    else return o.iterator();
  }
  var $_;
  function $bind(o, m) {
    if (m == null) return null;
    if (m.__id__ == null) m.__id__ = $global.$haxeUID++;
    var f;
    if (o.hx__closures__ == null) o.hx__closures__ = {};
    else f = o.hx__closures__[m.__id__];
    if (f == null) {
      f = m.bind(o);
      o.hx__closures__[m.__id__] = f;
    }
    return f;
  }
  $global.$haxeUID |= 0;
  if (
    typeof performance != "undefined"
      ? typeof performance.now == "function"
      : false
  ) {
    HxOverrides.now = performance.now.bind(performance);
  }
  String.__name__ = true;
  Array.__name__ = true;
  js_Boot.__toStr = {}.toString;
  CollisionSystem.colliders = [];
  CollisionSystem.colliderIds = [];
  LunaShooter.listener = new PIXI.utils.EventEmitter();
  LunaShooter.collisionSys = CollisionSystem;
  LunaShooter.timeScale = 1.0;
  LunaSceneShooter.performance = window.performance;
  SpriteSystem.sprites = [];
  SpriteSystem.spriteIds = [];
  LunaShooter.main();
})(
  typeof exports != "undefined"
    ? exports
    : typeof window != "undefined"
    ? window
    : typeof self != "undefined"
    ? self
    : this,
  typeof window != "undefined"
    ? window
    : typeof global != "undefined"
    ? global
    : typeof self != "undefined"
    ? self
    : this
);

//# sourceMappingURL=Luna_ShooterMV.js.map
